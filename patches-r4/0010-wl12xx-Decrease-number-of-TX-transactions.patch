From b41870d7255c8041dd93ae79253fdb471cdcff16 Mon Sep 17 00:00:00 2001
From: Moosa <moosa.baransi@babcomsoftware.com>
Date: Wed, 21 Dec 2011 12:21:18 +0200
Subject: [PATCH] Decrease number of TX transactions

On weak platforms, it is crucial to keep the number of SDIO transactions
to a bare minimum. It is probably more important to keep CPU utilization
low, than to handle FW events asap.

In order to decrease the number of TX transactions, don't schedule tx
work right away for every outgoing packet. Instead, try to wait for a
short period before scheduling tx work if there aren't enough pending
packets.

In addition, increase the TX pacing timeout, so the FW will have enough
free memory blocks for larger transfers.

Signed-off-by: Moosa <moosa.baransi@babcomsoftware.com>
---
 drivers/net/wireless/wl12xx/main.c   |   39 ++++++++++++++++++++++++++++++---
 drivers/net/wireless/wl12xx/wl12xx.h |    3 ++
 2 files changed, 38 insertions(+), 4 deletions(-)

diff --git a/drivers/net/wireless/wl12xx/main.c b/drivers/net/wireless/wl12xx/main.c
index aae6a74..25298f1 100644
--- a/drivers/net/wireless/wl12xx/main.c
+++ b/drivers/net/wireless/wl12xx/main.c
@@ -205,8 +205,8 @@ static struct conf_drv_settings default_conf = {
 			},
 		},
 		.frag_threshold              = IEEE80211_MAX_FRAG_THRESHOLD,
-		.tx_compl_timeout            = 700,
-		.tx_compl_threshold          = 4,
+		.tx_compl_timeout            = 1000,
+		.tx_compl_threshold          = 6,
 		.basic_rate                  = CONF_HW_BIT_RATE_1MBPS,
 		.basic_rate_5                = CONF_HW_BIT_RATE_6MBPS,
 		.tmpl_short_retry_limit      = 10,
@@ -1044,6 +1044,8 @@ irqreturn_t wl1271_irq(int irq, void *cookie)
 			spin_lock_irqsave(&wl->wl_lock, flags);
 			if (!test_bit(WL1271_FLAG_FW_TX_BUSY, &wl->flags) &&
 			    wl1271_tx_total_queue_count(wl) > 0) {
+				hrtimer_try_to_cancel(&wl->tx_timer);
+				clear_bit(WL1271_FLAG_TX_TIMER_SET, &wl->flags);
 				spin_unlock_irqrestore(&wl->wl_lock, flags);
 				/*
 				 * In order to avoid starvation of the TX path,
@@ -1553,6 +1555,9 @@ int wl1271_plt_stop(struct wl1271 *wl)
 	return ret;
 }
 
+#define TX_PACKETS_THRESHOLD	6
+#define TX_WORK_DELAY_NS	(1500 * 1000)
+
 static void wl1271_op_tx(struct ieee80211_hw *hw, struct sk_buff *skb)
 {
 	struct wl1271 *wl = hw->priv;
@@ -1600,14 +1605,37 @@ static void wl1271_op_tx(struct ieee80211_hw *hw, struct sk_buff *skb)
 	 * before that, the tx_work will not be initialized!
 	 */
 
-	if (!test_bit(WL1271_FLAG_FW_TX_BUSY, &wl->flags) &&
-	    !test_bit(WL1271_FLAG_TX_PENDING, &wl->flags))
+	if (test_bit(WL1271_FLAG_FW_TX_BUSY, &wl->flags) ||
+	    test_bit(WL1271_FLAG_TX_PENDING, &wl->flags))
+		goto out;
+
+	if (wl1271_tx_total_queue_count(wl) < TX_PACKETS_THRESHOLD) {
+		if (!test_and_set_bit(WL1271_FLAG_TX_TIMER_SET, &wl->flags))
+			hrtimer_start(&wl->tx_timer,
+				      ktime_set(0, TX_WORK_DELAY_NS),
+				      HRTIMER_MODE_REL);
+	} else {
+		hrtimer_try_to_cancel(&wl->tx_timer);
+		clear_bit(WL1271_FLAG_TX_TIMER_SET, &wl->flags);
 		ieee80211_queue_work(wl->hw, &wl->tx_work);
+	}
 
 out:
 	spin_unlock_irqrestore(&wl->wl_lock, flags);
 }
 
+enum hrtimer_restart wl12xx_tx_timer(struct hrtimer *timer)
+{
+	struct wl1271 *wl = container_of(timer, struct wl1271, tx_timer);
+	unsigned long flags;
+
+	spin_lock_irqsave(&wl->wl_lock, flags);
+	clear_bit(WL1271_FLAG_TX_TIMER_SET, &wl->flags);
+	ieee80211_queue_work(wl->hw, &wl->tx_work);
+	spin_unlock_irqrestore(&wl->wl_lock, flags);
+	return HRTIMER_NORESTART;
+}
+
 int wl1271_tx_dummy_packet(struct wl1271 *wl)
 {
 	unsigned long flags;
@@ -2318,6 +2346,7 @@ static void __wl1271_op_remove_interface(struct wl1271 *wl,
 	wl1271_flush_deferred_work(wl);
 	cancel_delayed_work_sync(&wl->scan_complete_work);
 	cancel_work_sync(&wl->netstack_work);
+	hrtimer_cancel(&wl->tx_timer);
 	cancel_work_sync(&wl->tx_work);
 	del_timer_sync(&wl->rx_streaming_timer);
 	cancel_work_sync(&wl->rx_streaming_enable_work);
@@ -5299,6 +5328,8 @@ struct ieee80211_hw *wl1271_alloc_hw(void)
 		    (unsigned long) wl);
 	wl->fwlog_size = 0;
 	init_waitqueue_head(&wl->fwlog_waitq);
+	hrtimer_init(&wl->tx_timer, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
+	wl->tx_timer.function = wl12xx_tx_timer;
 
 	memset(wl->links_map, 0, sizeof(wl->links_map));
 
diff --git a/drivers/net/wireless/wl12xx/wl12xx.h b/drivers/net/wireless/wl12xx/wl12xx.h
index 49e7ef5..61a454e 100644
--- a/drivers/net/wireless/wl12xx/wl12xx.h
+++ b/drivers/net/wireless/wl12xx/wl12xx.h
@@ -382,6 +382,7 @@ enum wl12xx_flags {
 	WL1271_FLAG_RECOVERY_IN_PROGRESS,
 	WL1271_FLAG_CS_PROGRESS,
 	WL1271_FLAG_PROBE_RESP_SET,
+	WL1271_FLAG_TX_TIMER_SET,
 };
 
 struct wl1271_link {
@@ -719,6 +720,8 @@ struct wl1271 {
 
 	/* RX Data filter rule status - enabled/disabled */
 	bool rx_data_filters_status[WL1271_MAX_RX_DATA_FILTERS];
+
+	struct hrtimer tx_timer;
 };
 
 struct wl1271_station {
-- 
1.7.0.4

